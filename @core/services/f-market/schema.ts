/* eslint-disable @typescript-eslint/no-unused-vars */

import { z } from "zod";

// Common

const ItemData = z.object({
  createdAt: z.number().nullable(),
  id: z.number(),
  nav: z.number(),
  navDate: z.string(),
  productId: z.number(),
});

export const NavHistoryResponseSchema = z.object({
  data: z.array(ItemData),
  code: z.number(),
  message: z.string(),
  status: z.number(),
  target: z.null(),
  time: z.number(),
  extra: z.object({
    clientCode: z.string(),
    clientVersion: z.string(),
    cmsVersion: z.string(),
  }),
});

// Define the nested schemas
const OwnerSchema = z.object({
  id: z.number(),
  encodeURL: z.string(),
  code: z.string(),
  name: z.string(),
  userId: z.number(),
  userCode: z.string(),
  email: z.string(),
  email2: z.string(),
  shortName: z.string(),
  address1: z.string(),
  phone: z.string(),
  phonePostal: z.string(),
  website: z.string(),
  templateContract: z.string(),
  hsbcCode: z.string(),
  securityDepositoryCenter: z.object({
    id: z.number(),
    code: z.string(),
    name: z.string(),
  }),
  avatarUrl: z.string(),
  isEnableEsign: z.boolean(),
  isSignBeforeBuy: z.boolean(),
  withdrawLimitSession: z.null(),
  withdrawLimitDaily: z.null(),
  buySellLimitDaily: z.null(),
});

const ProductNavChangeSchema = z.object({
  navToPrevious: z.number().nullable(),
  navToLastYear: z.number().nullable(),
  navToEstablish: z.number().nullable(),
  navTo1Months: z.number().nullable(),
  navTo3Months: z.number().nullable(),
  navTo6Months: z.number().nullable(),
  navTo12Months: z.number().nullable(),
  navTo24Months: z.number().nullable(),
  navTo36Months: z.number().nullable(),
  navTo60Months: z.number().nullable(),
  annualizedReturn36Months: z.number().nullable(),
  navToBeginning: z.number().nullable(),
  updateAt: z.number(),
});

const ItemDataSchema = z.object({
  id: z.number(),
  name: z.string(),
  shortName: z.string(),
  code: z.string(),
  subCode: z.null(),
  tradeCode: z.string(),
  sipCode: z.string(),
  price: z.number(),
  nav: z.number(),
  lastYearNav: z.number(),
  buyMin: z.null(),
  buyMax: z.null(),
  buyMinValue: z.null(),
  buyMaxValue: z.null(),
  sellMin: z.number().nullable(),
  sellMinValue: z.null(),
  transferSellMin: z.number().nullable(),
  isOnlySellMinNotSellAll: z.boolean(),
  holdingMin: z.number(),
  instock: z.null(),
  holdingVolume: z.number(),
  issueVolume: z.null(),
  issueValue: z.null(),
  firstIssueAt: z.number(),
  approveAt: z.number(),
  endIssueAt: z.number(),
  maturityAt: z.null(),
  website: z.string(),
  websiteURL: z.string(),
  customField: z.string(),
  customValue: z.string(),
  expectedReturn: z.number(),
  managementFee: z.number(),
  performanceFee: z.number().nullable(),
  closedOrderBookAt: z.null(),
  closedOrderBookShiftDay: z.null(),
  closedBankNote: z.null(),
  productTradingSession: z.null(),
  completeTransactionDuration: z.number(),
  description: z.string(),
  balance: z.number(),
  feeBalance: z.number(),
  vsdFeeId: z.string(),
  avgAnnualReturn: z.number(),
  isTransferred: z.boolean(),
  createAt: z.number(),
  updateAt: z.number(),
  productAssetAllocationList: z.null(),
  productAssetAllocationModelList: z.null(),
  productAssetAllocationModel1: z.null(),
  productAssetAllocationModel2: z.null(),
  owner: OwnerSchema,
  type: z.string(),
  status: z.string(),
  riskLevel: z.null(),
  moneyTransferSyntax: z.null(),
  fundType: z.object({
    id: z.number(),
    name: z.string(),
  }),
  dataFundAssetType: z.object({
    id: z.number(),
    name: z.string(),
    code: z.string(),
  }),
  productBond: z.null(),
  productCD: z.null(),
  productGold: z.null(),
  productFund: z.object({
    id: z.number(),
    ipoStartTime: z.number().nullable(),
    ipoEndTime: z.number().nullable(),
    issueAt: z.number().nullable(),
    surveyIpoTemplate: z.string().nullable(),
    isBuyByReward: z.boolean().nullable(),
    updateAssetHoldingTime: z.string().nullable(),
    ipoStatusCode: z.string().nullable(),
  }),
  productNavChange: ProductNavChangeSchema,
  productFeeList: z.null(),
  productFeeSipList: z.null(),
  productFeeDiscountList: z.null(),
  productTransactionDateList: z.null(),
  productTransactionDateModelList: z.null(),
  productSupervisoryBankAccount: z.null(),
  productSupervisoryBankAccountList: z.null(),
  productTopHoldingList: z.null(),
  productTopHoldingBondList: z.null(),
  productAssetHoldingList: z.null(),
  productIndustriesHoldingList: z.null(),
  productDocuments: z.null(),
  extra: z.object({
    lastNAVDate: z.number(),
    lastNAV: z.number(),
    currentNAV: z.number(),
  }),
  isDelete: z.boolean(),
  isProductIpo: z.boolean(),
  contentHome: z.null(),
  fundReport: z.null(),
});

export const FilterProductsResponseSchema = z.object({
  status: z.number(),
  code: z.number(),
  time: z.number(),
  message: z.string(),
  target: z.null(),
  data: z.object({
    page: z.number(),
    pageSize: z.number(),
    total: z.number(),
    rows: z.array(ItemDataSchema),
    fromDate: z.number(),
    toDate: z.number(),
    issuerIds: z.array(z.unknown()),
    productIds: z.array(z.unknown()),
    subdomainOwnerIds: z.array(z.unknown()),
    thirdAppIds: z.array(z.unknown()),
    excludeIds: z.array(z.unknown()),
    types: z.array(z.string()),
    statuses: z.array(z.string()),
    periods: z.array(z.unknown()),
    fundAssetTypes: z.array(z.string()),
    searchField: z.null(),
    agentId: z.null(),
    sortField: z.string(),
    sortOrder: z.string(),
    isIpo: z.null(),
    isMMFFund: z.null(),
    isBuyByReward: z.null(),
    isNotSafefy: z.null(),
    userRewardValue: z.null(),
  }),
  extra: z.object({
    clientCode: z.string(),
    clientVersion: z.string(),
    cmsVersion: z.string(),
  }),
});

export type NavHistoryResponse = z.infer<typeof NavHistoryResponseSchema>;

export type FilterProductsResponse = z.infer<
  typeof FilterProductsResponseSchema
>;
